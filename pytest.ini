[tool:pytest]
# Pytest configuration for UK Business Lead Generator v2.0

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Output options
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --color=yes
    --durations=10
    --cov=src
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=85
    --cov-branch
    --junitxml=test-results.xml

# Markers for test categorization
markers =
    unit: Unit tests
    integration: Integration tests
    performance: Performance tests
    slow: Slow running tests
    network: Tests requiring network access
    gui: GUI tests
    automation: Automation engine tests
    database: Database tests
    cache: Cache system tests
    validation: Data validation tests
    logging: Logging system tests
    monitoring: Performance monitoring tests
    error_handling: Error handling tests
    retry: Retry mechanism tests
    config: Configuration tests
    security: Security tests
    smoke: Smoke tests for basic functionality

# Test filtering
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning
    ignore:.*ssl.*:urllib3.exceptions.InsecureRequestWarning

# Minimum version requirements
minversion = 7.0

# Required plugins
required_plugins =
    pytest-cov>=4.0.0
    pytest-mock>=3.10.0
    pytest-asyncio>=0.21.0
    pytest-qt>=4.2.0

# Asyncio configuration
asyncio_mode = auto

# Qt application testing
qt_api = pyqt5

# Timeout for tests (in seconds)
timeout = 300

# Parallel execution
# Uncomment to enable parallel test execution
# addopts = -n auto

# Test data directory
testmon_datafile = .testmondata

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    */.venv/*
    setup.py
    */migrations/*
    */static/*
    */media/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

show_missing = True
skip_covered = False
skip_empty = False
sort = Cover

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml